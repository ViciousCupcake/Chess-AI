{"version":3,"sources":["components/square.js","components/board.js","pieces/piece.js","helpers/index.js","pieces/king.js","components/fallen-soldier-block.js","pieces/bishop.js","pieces/knight.js","pieces/pawn.js","pieces/queen.js","pieces/rook.js","helpers/board-initialiser.js","helpers/invalidDepthException.js","components/game.js","index.js"],"names":["Square","props","className","shade","tint","onClick","style","keyVal","Board","i","squareShade","possibleMoveTint","this","squares","board","squareRows","j","isEven","push","renderSquare","isPossibleMove","React","Component","num","Piece","player","iconUrl","value","backgroundImage","diagonalDictionaryTLBR","require","diagonalDictionaryTRBL","rowDictionary","columnDictionary","isSameRow","src","dest","isSameColumn","isSameDiagonal","isPathClean","srcToDestPath","Map","reduce","acc","curr","get","isValidIndex","index","King","possibleMoves","forEach","currentDiff","isMovePossible","FallenSoldierBlock","square","piece","whiteFallenSoldiers","map","ws","blackFallenSoldiers","bs","Bishop","isDestEnemyOccupied","Boolean","getSrcToDestPath","Object","keys","current","Number","pathStart","pathEnd","incrementBy","path","Math","abs","Knight","possibleDifferences","total","isBetweenLeftRightBoundary","rowColDiffTable","destRow","floor","destCol","srcRow","srcCol","Pawn","initialPositions","1","2","undefined","isDestinationOK","indexOf","Queen","Rook","initialiseChessBoard","Array","fill","getInitialSoldierIndices","output","Set","add","InvalidDepthException","message","Error","captureStackTrace","stack","prototype","create","name","constructor","Game","state","whiteAliveSoldiers","blackAliveSoldiers","sourceSelection","status","turn","score","bestSrc","bestDest","computations","depth","isGameOver","console","log","backgroundColor","getPossibleMoves","setState","delete","oldState","charAt","toUpperCase","slice","getPlayer","opponent","playersKingPosition","getKingPosition","idx","handleClick","id","href","target","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b702fde.chunk.js","sourcesContent":["import React from 'react';\n\nimport '../index.css';\n\nexport default function Square(props) {\n\n  return (\n    <button className={\"square \" + props.shade + \" \" + props.tint}\n      onClick={props.onClick}\n      style={props.style}\n      key={props.keyVal}\n    >\n\n    </button>\n  );\n\n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class Board extends React.Component {\n\n  renderSquare(i, squareShade, possibleMoveTint) {\n    return <Square\n      key={i}\n      keyVal={i}\n      style={this.props.squares[i] ? this.props.squares[i].style : null}\n      shade={squareShade}\n      tint={possibleMoveTint}\n      onClick={() => this.props.onClick(i)}\n    />\n  }\n\n  render() {\n    const board = [];\n    for (let i = 0; i < 8; i++) {\n      const squareRows = [];\n      for (let j = 0; j < 8; j++) {\n        const squareShade = (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j)) ? \"light-square\" : \"dark-square\";\n        squareRows.push(this.renderSquare((i * 8) + j, squareShade, this.props.isPossibleMove[(i * 8) + j] ? \"possible-move\" : \"\"));\n      }\n      board.push(<div className=\"board-row\" key={i}>{squareRows}</div>)\n    }\n\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n\nfunction isEven(num) {\n  return num % 2 === 0\n}","export default class Piece {\n  constructor(player, iconUrl, value) {\n    this.player = player;\n    this.style = { backgroundImage: \"url('\" + iconUrl + \"')\" };\n    this.value = value;\n  }\n\n  getPlayer() {\n    return this.player\n  }\n}","const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\nconst diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\nconst rowDictionary = require('../dictionaries/row.json');\nconst columnDictionary = require('../dictionaries/column.json');\n\nexport const isSameRow = (src, dest) => { // TODO: Make more efficient using math\n  return !!(rowDictionary[src] && rowDictionary[src][dest]);\n}\n\nexport const isSameColumn = (src, dest) => {\n  return !!(columnDictionary[src] && columnDictionary[src][dest]);\n}\n\nexport const isSameDiagonal = (src, dest) => {\n  return !!((diagonalDictionaryTLBR[src] && diagonalDictionaryTLBR[src][dest]) ||\n    (diagonalDictionaryTRBL[src] && diagonalDictionaryTRBL[src][dest]))\n}\n\nexport const isPathClean = (srcToDestPath, squares) => {\n  var out = undefined;\n  if (squares instanceof Map) {\n    out = srcToDestPath.reduce((acc, curr) => { return !squares.get(curr) && acc; }, true);\n  }\n  else {\n    out = srcToDestPath.reduce((acc, curr) => { return !squares[curr] && acc; }, true);\n  }\n  return out;\n}\n\nexport const isValidIndex = (index) => {\n  return index >= 0 && index <= 63;\n}\n\nexport const compareMaps = (map1, map2) => {\n  var testVal;\n  if (map1.size !== map2.size) {\n    console.log(map1);\n    console.log(map2);\n    console.log(\"maps not equal\");\n\n    return false;\n  }\n  for (var [key, val] of map1) {\n    testVal = map2.get(key);\n    // in cases of an undefined value, make sure the key\n    // actually exists on the object so there are no false positives\n    if (testVal !== val || (testVal === undefined && !map2.has(key))) {\n      console.log(map1);\n      console.log(map2);\n      console.log(\"maps not equal\");\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const compareMapsAndSets = (map1, set1, set2) => {\n  if (map1.size !== (set1.size + set2.size)) {\n    console.log(\"Differing sizes\");\n    console.log(map1);\n    console.log(set1);\n    console.log(set2);\n    return false;\n  }\n  for (var [key, val] of map1) {\n    // in cases of an undefined value, make sure the key\n    // actually exists on the object so there are no false positives\n    if (!(set1.has(key) || set2.has(key))) {\n      console.log(\"Key not found\");\n      console.log(map1);\n      console.log(set1);\n      console.log(set2);\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const toChessLocation = (index) => {\n  var row = 8 - Math.floor(index / 8);\n  var col = index % 8;\n  return String.fromCharCode(65 + col) + row;\n}","import Piece from './piece.js';\nimport { isSameDiagonal, isSameRow, isValidIndex } from '../helpers/index.js'\n\nexport default class King extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg\"),\n      50);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      return isValidIndex(dest) && // destination is valid index\n        (!squares.get(dest) ||  // destination is null or\n          squares.get(dest).player !== this.player) && // destination is occupied by an enemy\n        ((src - 9 === dest && isSameDiagonal(src, dest)) ||\n          src - 8 === dest ||\n          (src - 7 === dest && isSameDiagonal(src, dest)) ||\n          (src + 1 === dest && isSameRow(src, dest)) ||\n          (src + 9 === dest && isSameDiagonal(src, dest)) ||\n          src + 8 === dest ||\n          (src + 7 === dest && isSameDiagonal(src, dest)) ||\n          (src - 1 === dest && isSameRow(src, dest)));\n    }\n    else {\n      return isValidIndex(dest) && // destination is valid index\n        (!squares[dest] ||  // destination is null or\n          squares[dest].player !== this.player) && // destination is occupied by an enemy\n        ((src - 9 === dest && isSameDiagonal(src, dest)) ||\n          src - 8 === dest ||\n          (src - 7 === dest && isSameDiagonal(src, dest)) ||\n          (src + 1 === dest && isSameRow(src, dest)) ||\n          (src + 9 === dest && isSameDiagonal(src, dest)) ||\n          src + 8 === dest ||\n          (src + 7 === dest && isSameDiagonal(src, dest)) ||\n          (src - 1 === dest && isSameRow(src, dest)));\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = [-9, -8, -7, 1, 9, 8, 7, -1];\n    possibleDifferences.forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * always returns empty array because of one step\n   * @return {[]}\n   */\n  getSrcToDestPath(src, dest) {\n    return [];\n  }\n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class FallenSoldierBlock extends React.Component {\n\n  renderSquare(square, i, squareShade) {\n    return <Square\n      key={i}\n      keyVal={i}\n      piece={square}\n      style={square.style}\n    />\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row indiv-fallen-block\">{this.props.whiteFallenSoldiers.map((ws, index) =>\n          this.renderSquare(ws, index)\n        )}</div>\n        <div className=\"board-row indiv-fallen-block\">{this.props.blackFallenSoldiers.map((bs, index) =>\n          this.renderSquare(bs, index)\n        )}</div>\n      </div>\n    );\n  }\n}\n\n","import Piece from './piece.js';\nimport { isSameDiagonal, isPathClean } from '../helpers/index.js'\n\nexport default class Bishop extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg\"),\n      3);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && isPathClean(this.getSrcToDestPath(src, dest), squares) && isSameDiagonal(src, dest) && (!squares.get(dest) || isDestEnemyOccupied);\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && isPathClean(this.getSrcToDestPath(src, dest), squares) && isSameDiagonal(src, dest) && (!squares[dest] || isDestEnemyOccupied);\n    }\n\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\n    const diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\n    if (!!diagonalDictionaryTLBR[src]) {\n      Object.keys(diagonalDictionaryTLBR[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    if (!!diagonalDictionaryTRBL[src]) {\n      Object.keys(diagonalDictionaryTRBL[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 9 === 0) {\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else {\n      incrementBy = 7;\n      pathStart += 7;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Piece from './piece.js';\nimport { isSameRow, isValidIndex } from '../helpers/index.js'\n\nexport default class Knight extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg\"),\n      3);\n  }\n  /**\n   * returns true if a move is possible\n   * @param {number} src - starting position\n   * @param {number} dest - ending position\n   * @param {Piece[]} squares - array representing locations of chess pieces\n   * @returns {boolean} if a move is possible\n   */\n  isMovePossible(src, dest, squares) {\n    const possibleDifferences = [-17, -10, 6, 15, -15, -6, 10, 17];\n    if (squares instanceof Map) {\n      return possibleDifferences.reduce((total, currentDiff) => {\n        return total ||\n          (src + currentDiff === dest &&\n            !isSameRow(src, dest) &&\n            this.isBetweenLeftRightBoundary(src, dest) &&\n            (!squares.get(dest) /* not null*/ || squares.get(src).player !== squares.get(dest).player));\n      }, false);\n    }\n    else {\n      return possibleDifferences.reduce((total, currentDiff) => {\n        return total ||\n          (src + currentDiff === dest &&\n            !isSameRow(src, dest) &&\n            this.isBetweenLeftRightBoundary(src, dest) &&\n            (!squares[dest] /* not null*/ || squares[src].player !== squares[dest].player));\n      }, false);\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = [-17, -10, 6, 15, -15, -6, 10, 17];\n    possibleDifferences.forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * returns true if knight doesn't pass through the left or right boundary (i.e. knight doesnt jump from the left side to the right side)\n   * @param {number} src - Initial position\n   * @param {number} dest - Ending position\n   */\n  isBetweenLeftRightBoundary(src, dest) {\n    const rowColDiffTable = require('../dictionaries/knightMapping.json');\n    var destRow = Math.floor(dest / 8); // Integer division\n    var destCol = dest % 8;\n    var srcRow = Math.floor(src / 8);\n    var srcCol = src % 8;\n\n    return (rowColDiffTable[dest - src] && rowColDiffTable[dest - src]['row'] === (destRow - srcRow) && rowColDiffTable[dest - src]['col'] === (destCol - srcCol));\n  }\n\n  /**\n   * always returns empty array because of jumping\n   * @return {[]}\n   */\n  getSrcToDestPath() {\n    return [];\n  }\n}\n","import Piece from './piece.js';\nimport { isSameDiagonal, isValidIndex, isPathClean } from '../helpers/index.js'\n\nexport default class Pawn extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg\"),\n      1);\n    this.initialPositions = {\n      1: [48, 49, 50, 51, 52, 53, 54, 55],\n      2: [8, 9, 10, 11, 12, 13, 14, 15]\n    }\n  }\n\n  isMovePossible(src, dest, squares) {\n    var isDestEnemyOccupied = undefined;\n    var isDestinationOK = undefined;\n    if (squares instanceof Map) {\n      isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      isDestinationOK = isPathClean(this.getSrcToDestPath(src, dest), squares) && (!squares.get(dest) || isDestEnemyOccupied);\n    }\n    else {\n      isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      isDestinationOK = isPathClean(this.getSrcToDestPath(src, dest), squares) && (!squares[dest] || isDestEnemyOccupied);\n    }\n\n    if (this.player === 1) {\n      if ((dest === src - 8 && !isDestEnemyOccupied) || (dest === src - 16 && !isDestEnemyOccupied && this.initialPositions[1].indexOf(src) !== -1)) {\n        return isDestinationOK;\n      }\n      else if (isDestEnemyOccupied && isSameDiagonal(src, dest) && (dest === src - 9 || dest === src - 7)) {\n        return isDestinationOK;\n      }\n    }\n    else if (this.player === 2) {\n      if ((dest === src + 8 && !isDestEnemyOccupied) || (dest === src + 16 && !isDestEnemyOccupied && this.initialPositions[2].indexOf(src) !== -1)) {\n        return isDestinationOK;\n      }\n      else if (isDestEnemyOccupied && isSameDiagonal(src, dest) && (dest === src + 9 || dest === src + 7)) {\n        return isDestinationOK;\n      }\n    }\n    return false;\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = {\n      1: [-8, -16, -9, -7],\n      2: [8, 16, 9, 7]\n    }\n    possibleDifferences[this.player].forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * returns array of one if pawn moves two steps, else returns empty array  \n   * @param  {number} src - initial position\n   * @param  {number} dest - ending position\n   * @return {number[]} array of indicies representing the path the pawn takes\n   */\n  getSrcToDestPath(src, dest) {\n    if (dest === src - 16) {\n      return [src - 8];\n    }\n    else if (dest === src + 16) {\n      return [src + 8];\n    }\n    return [];\n  }\n}\n","import Piece from './piece.js';\nimport { isSameRow, isSameColumn, isSameDiagonal, isPathClean, isValidIndex } from '../helpers/index.js'\n\nexport default class Queen extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg\"),\n      9);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && (!squares.get(dest) || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameDiagonal(src, dest) || isSameRow(src, dest) || isSameColumn(src, dest));\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && (!squares[dest] || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameDiagonal(src, dest) || isSameRow(src, dest) || isSameColumn(src, dest));\n    }\n\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    var dest = 1000;\n    // column\n    for (dest = src % 8; isValidIndex(dest); dest += 8) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // row\n    for (dest = Math.floor(src / 8) * 8; dest < (Math.floor(src / 8) * 8 + 8); dest++) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // diagonal\n    const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\n    const diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\n    if (!!diagonalDictionaryTLBR[src]) {\n      Object.keys(diagonalDictionaryTLBR[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    if (!!diagonalDictionaryTRBL[src]) {\n      Object.keys(diagonalDictionaryTRBL[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 8 === 0 && isSameColumn(src, dest)) {\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else if (Math.abs(src - dest) % 9 === 0 && isSameDiagonal(src, dest)) {\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else if (Math.abs(src - dest) % 7 === 0 && isSameDiagonal(src, dest)) {\n      incrementBy = 7;\n      pathStart += 7;\n    }\n    else {\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}","import Piece from './piece.js';\nimport { isSameRow, isSameColumn, isPathClean, isValidIndex } from '../helpers/index.js'\n\nexport default class Rook extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg\"),\n      5);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && (!squares.get(dest) || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameColumn(src, dest) || isSameRow(src, dest));\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && (!squares[dest] || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameColumn(src, dest) || isSameRow(src, dest));\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    // column\n    // TODO: Optimize by using while loop starting from src and going outwards until reaching a piece\n    var dest = 1000;\n    for (dest = src % 8; isValidIndex(dest); dest += 8) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // row\n    for (dest = Math.floor(src / 8) * 8; dest < (Math.floor(src / 8) * 8 + 8); dest++) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 8 === 0 && isSameColumn(src, dest)) {\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else {\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Pawn from '../pieces/pawn.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\n\nexport const initialiseChessBoard = () => {\n  const squares = Array(64).fill(null);\n\n  for (let i = 8; i < 16; i++) {\n    squares[i] = new Pawn(2);\n    squares[i + 40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n\n  squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n\n  squares[2] = new Bishop(2);\n  squares[5] = new Bishop(2);\n  squares[58] = new Bishop(1);\n  squares[61] = new Bishop(1);\n\n  squares[3] = new Queen(2);\n  squares[4] = new King(2);\n\n  squares[59] = new Queen(1);\n  squares[60] = new King(1);\n\n  return squares;\n}\nexport const getInitialSoldierIndices = (player) => {\n  const output = new Set();\n  var index = 1000;\n  if(player === 2){\n    for(index = 0; index < 16; index++){\n      output.add(index);\n    }\n  }\n  else if(player === 1){\n    for(index = 48; index < 64; index++){\n      output.add(index);\n    }\n  }\n  return output;\n}","export default function InvalidDepthException() {\n    this.message = \"Invalid Depth was Provided! Depth must be >= 1\";\n    // Use V8's native method if available, otherwise fallback\n    if (\"captureStackTrace\" in Error)\n        Error.captureStackTrace(this, InvalidDepthException);\n    else\n        this.stack = (new Error()).stack;\n}\n\nInvalidDepthException.prototype = Object.create(Error.prototype);\nInvalidDepthException.prototype.name = \"InvalidDepthException\";\nInvalidDepthException.prototype.constructor = InvalidDepthException;","import React from 'react';\nimport { GrReactjs, GrHeroku, GrGithub } from 'react-icons/gr';\n\n\nimport '../index.css';\nimport Board from './board.js';\nimport King from '../pieces/king'\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport { initialiseChessBoard, getInitialSoldierIndices } from '../helpers/board-initialiser.js';\nimport minimaxRunner from '../helpers/minimax';\n\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initialiseChessBoard(),\n      isPossibleMove: Array(64).fill(false),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      whiteAliveSoldiers: getInitialSoldierIndices(1),\n      blackAliveSoldiers: getInitialSoldierIndices(2),\n      player: 1,\n      sourceSelection: -1,\n      status: '',\n      turn: 'white',\n      score: '0',\n      bestSrc: 'N/A',\n      bestDest: 'N/A',\n      computations: 'N/A',\n      depth: 4,\n      isGameOver: false\n    }\n  }\n\n  /**\n   * Runs Chess Logic when Player clicks the board\n   * @param {Number} i - The location on the board that the user selected\n   */\n  handleClick(i) {\n    if(this.state.isGameOver){\n      return;\n    }\n    console.log(this.state);\n    const squares = [...this.state.squares];\n    if (this.state.sourceSelection === -1) { // If no piece is already selected (i.e. first click)\n      if (!squares[i] || squares[i].player !== this.state.player) { // If player selected null piece or a piece that isn't under control of player\n        this.setState({ status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\" });\n        if (squares[i]) {\n          squares[i].style = { ...squares[i].style, backgroundColor: \"\" };\n        }\n      }\n      else {\n        // Player clicked a piece to move\n        squares[i].style = { ...squares[i].style, backgroundColor: \"#856312\" };\n        squares[i].getPossibleMoves(i, squares).forEach((value) => {\n          this.state.isPossibleMove[value] = true;\n        });\n        this.setState({\n          status: \"Choose destination for the selected piece\",\n          sourceSelection: i\n        })\n      }\n      return\n    }\n\n    // remove background color\n    squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style, backgroundColor: \"\" };\n    squares[this.state.sourceSelection].getPossibleMoves(this.state.sourceSelection, squares).forEach((value) => {\n      this.state.isPossibleMove[value] = false;\n    });\n\n    // Prevent moving piece on top of another piece of the same color\n    if (squares[i] && squares[i].player === this.state.player) {\n      this.setState({\n        status: \"Wrong selection. Choose valid source and destination again.\",\n        sourceSelection: -1,\n      });\n    }\n    else {\n      const whiteFallenSoldiers = [];\n      const blackFallenSoldiers = [];\n      const whiteAliveSoldiers = this.state.whiteAliveSoldiers;\n      const blackAliveSoldiers = this.state.blackAliveSoldiers;\n\n      const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, squares);\n      if (isMovePossible) {\n        if (squares[i] !== null) { // If piece kills an opponent's piece\n          if (squares[i].player === 1) {\n            whiteFallenSoldiers.push(squares[i]);\n            // Remove dead piece from aliveSoldiers array\n            whiteAliveSoldiers.delete(i);\n          }\n          else {\n            blackFallenSoldiers.push(squares[i]);\n            // Remove dead piece from aliveSoldiers array\n            blackAliveSoldiers.delete(i);\n          }\n\n          // Game over if the piece that died is a King\n          if (squares[i] instanceof King) {\n            console.log(\"Game over\");\n            this.setState(oldState => ({\n              sourceSelection: -1,\n              squares,\n              whiteFallenSoldiers: [...oldState.whiteFallenSoldiers, ...whiteFallenSoldiers],\n              blackFallenSoldiers: [...oldState.blackFallenSoldiers, ...blackFallenSoldiers],\n              status: this.state.turn.charAt(0).toUpperCase() + this.state.turn.slice(1) + \" wins! Game Over!\", // Capitalize the player name\n              isGameOver: true\n            }));\n            return;\n          }\n        }\n\n        squares[i] = squares[this.state.sourceSelection];\n        squares[this.state.sourceSelection] = null;\n        // remove sourceSelection add I (i.e. update aliveSoldiers arrays)\n        if (this.state.player === 1) { // White\n          whiteAliveSoldiers.delete(this.state.sourceSelection);\n          whiteAliveSoldiers.add(i);\n        }\n        else if (this.state.player === 2) { // Black\n          blackAliveSoldiers.delete(this.state.sourceSelection);\n          blackAliveSoldiers.add(i);\n        }\n\n        {\n          // Update turn\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white';\n          this.setState(oldState => ({\n            sourceSelection: -1,\n            squares,\n            whiteFallenSoldiers: [...oldState.whiteFallenSoldiers, ...whiteFallenSoldiers],\n            blackFallenSoldiers: [...oldState.blackFallenSoldiers, ...blackFallenSoldiers],\n            whiteAliveSoldiers: whiteAliveSoldiers,\n            blackAliveSoldiers: blackAliveSoldiers,\n            player,\n            status: '',\n            turn\n          }));\n\n          // Call minimax for opponent\n          /*if (player === 1) {\n            setTimeout(minimaxRunner, 1000, squares,\n              this.state.whiteAliveSoldiers, this.state.blackAliveSoldiers,\n              this.state.whiteFallenSoldiers, this.state.blackFallenSoldiers,\n              this.state.depth, 1, this);\n          }\n          else {\n            setTimeout(minimaxRunner, 1000, squares,\n              this.state.whiteAliveSoldiers, this.state.blackAliveSoldiers,\n              this.state.whiteFallenSoldiers, this.state.blackFallenSoldiers,\n              this.state.depth, 2, this);\n          }*/\n        }\n      }\n      else {\n        this.setState({\n          status: \"Wrong selection. Choose valid source and destination again- impossible move.\",\n          sourceSelection: -1,\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the index of the king (i.e. the king's location)\n   * @param {Piece[]} squares - The array representing the current state of the board\n   * @param {Number} player - The player ID of the King requested\n   */\n  getKingPosition(squares, player) {\n    return squares.reduce((acc, curr, i) =>\n      acc || //King may be only one, if we had found it, returned his position\n      ((curr //current squre mustn't be a null\n        && (curr.getPlayer() === player)) //we are looking for aspecial king \n        && (curr instanceof King)\n        && i), // returned position if all conditions are completed\n      null)\n  }\n\n  /**\n   * Returns true if player is Check, and false if not check.\n   * @param {Piece[]} squares - The array representing the current state of the board\n   * @param {Number} player - The player ID requested to check\n   */\n  isCheckForPlayer(squares, player) {\n    const opponent = player === 1 ? 2 : 1\n    const playersKingPosition = this.getKingPosition(squares, player)\n    const canPieceKillPlayersKing = (piece, i) => piece.isMovePossible(playersKingPosition, i, squares)\n    return squares.reduce((acc, curr, idx) =>\n      acc ||\n      (curr &&\n        (curr.getPlayer() === opponent) && canPieceKillPlayersKing(curr, idx)\n        && true),\n      false)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={this.state.squares}\n              onClick={(i) => this.handleClick(i)}\n              isPossibleMove={this.state.isPossibleMove}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className=\"game-bottom-box\">\n              <div className=\"float-child\">\n                <h3 className=\"turn-label\">Turn</h3>\n                <div id=\"player-turn-box\" style={{ backgroundColor: this.state.turn }}>\n                </div>\n              </div>\n\n              <div className=\"float-child console-text\">\n                <p>\n                  Best Starting Position: {this.state.bestSrc}\n                  <br></br>\n                  Best Ending Position: {this.state.bestDest}\n                  <br></br>\n                  Computations Performed: {this.state.computations}\n                  <br></br>\n                  Recursive Depth: {this.state.depth}\n                </p>\n              </div>\n            </div>\n            <div className=\"game-status\">{this.state.status}</div>\n\n            <div className=\"fallen-soldier-block\">\n\n              {<FallenSoldierBlock\n                whiteFallenSoldiers={this.state.whiteFallenSoldiers}\n                blackFallenSoldiers={this.state.blackFallenSoldiers}\n              />\n              }\n            </div>\n\n          </div>\n        </div>\n\n        <div className=\"icons-attribution\">\n          <div>\n            <div className=\"tech-used\">\n              <p>\n                Created by Jonathan Xu using <span className=\"react-icon\"><GrReactjs /> React</span> and deployed to <span className=\"heroku-icon\"><GrHeroku /> Heroku</span>.\n              </p>\n              <p>\n                <a href=\"https://github.com/ViciousCupcake/Chess-AI\" target=\"_blank\" rel=\"noreferrer\"> <GrGithub /> Source Code</a>\n              </p>\n            </div>\n            <div>\n              <small> Chess Icons And Favicon (extracted) By <a href=\"https://en.wikipedia.org/wiki/User:Cburnett\" >en:User:Cburnett</a> [\n              <a href=\"http://www.gnu.org/copyleft/fdl.html\" target=\"_blank\" rel=\"noreferrer\">GFDL</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" target=\"_blank\" rel=\"noreferrer\">CC-BY-SA-3.0</a>,\n              <a href=\"http://opensource.org/licenses/bsd-license.php\" target=\"_blank\" rel=\"noreferrer\">BSD</a> or <a href=\"http://www.gnu.org/licenses/gpl.html\" target=\"_blank\" rel=\"noreferrer\">GPL</a>],\n              <span> </span><a href=\"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\" target=\"_blank\" rel=\"noreferrer\">via Wikimedia Commons</a>.</small>\n            </div>\n            <div>\n              <small> Chess Board Created by <a href=\"https://www.techighness.com\" target=\"_blank\" rel=\"noreferrer\">Talha Awan</a> [<a href=\"https://mit-license.org\" target=\"_blank\" rel=\"noreferrer\">MIT License</a>]</small>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Game from './components/game.js'\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}