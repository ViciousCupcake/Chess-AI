{"version":3,"sources":["components/square.js","components/board.js","pieces/piece.js","helpers/index.js","pieces/king.js","components/fallen-soldier-block.js","pieces/bishop.js","pieces/knight.js","pieces/pawn.js","pieces/queen.js","pieces/rook.js","helpers/board-initialiser.js","helpers/invalidDepthException.js","helpers/minimax.js","components/game.js","index.js"],"names":["Square","props","className","shade","onClick","style","keyVal","Board","i","squareShade","this","squares","board","squareRows","j","isEven","push","renderSquare","React","Component","num","Piece","player","iconUrl","value","backgroundImage","diagonalDictionaryTLBR","require","diagonalDictionaryTRBL","rowDictionary","columnDictionary","isSameRow","src","dest","isSameColumn","isSameDiagonal","isPathClean","srcToDestPath","Map","reduce","acc","curr","get","isValidIndex","index","toChessLocation","row","Math","floor","col","String","fromCharCode","King","possibleMoves","forEach","currentDiff","isMovePossible","FallenSoldierBlock","square","piece","whiteFallenSoldiers","map","ws","blackFallenSoldiers","bs","Bishop","isDestEnemyOccupied","Boolean","getSrcToDestPath","Object","keys","current","Number","pathStart","pathEnd","incrementBy","path","abs","Knight","possibleDifferences","total","isBetweenLeftRightBoundary","rowColDiffTable","destRow","destCol","srcRow","srcCol","Pawn","initialPositions","1","2","undefined","isDestinationOK","indexOf","Queen","Rook","initialiseChessBoard","Array","fill","getInitialSoldierIndices","output","Set","add","InvalidDepthException","message","Error","captureStackTrace","stack","prototype","create","name","constructor","computationsPerformed","minimaxRunner","whiteAliveSoldiers","blackAliveSoldiers","depth","self","mapObj","obj","set","isMaximizingPlayer","bestMove","bestDest","bestSrc","alpha","beta","initialAliveSoldiers","lostPiece","lostPieceObj","score","outerMaximizingLoop","getPossibleMoves","has","delete","minimax","pop","max","outerMinimizingLoop","min","console","log","setState","oldState","computations","handleClick","sum","element","getValue","evaluateScore","Game","state","sourceSelection","status","turn","backgroundColor","charAt","toUpperCase","slice","setTimeout","getPlayer","opponent","playersKingPosition","getKingPosition","idx","id","href","target","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6682e758.chunk.js","sourcesContent":["import React from 'react';\n\nimport '../index.css';\n\nexport default function Square(props) {\n\n  return (\n    <button className={\"square \" + props.shade}\n      onClick={props.onClick}\n      style={props.style}\n      key={props.keyVal}\n    >\n\n    </button>\n  );\n\n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class Board extends React.Component {\n\n  renderSquare(i, squareShade) {\n    return <Square\n      key={i}\n      keyVal={i}\n      style={this.props.squares[i] ? this.props.squares[i].style : null}\n      shade={squareShade}\n      onClick={() => this.props.onClick(i)}\n    />\n  }\n\n  render() {\n    const board = [];\n    for (let i = 0; i < 8; i++) {\n      const squareRows = [];\n      for (let j = 0; j < 8; j++) {\n        const squareShade = (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j)) ? \"light-square\" : \"dark-square\";\n        squareRows.push(this.renderSquare((i * 8) + j, squareShade));\n      }\n      board.push(<div className=\"board-row\" key={i}>{squareRows}</div>)\n    }\n\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n\nfunction isEven(num) {\n  return num % 2 === 0\n}","export default class Piece {\n  constructor(player, iconUrl, value) {\n    this.player = player;\n    this.style = { backgroundImage: \"url('\" + iconUrl + \"')\" };\n    this.value = value;\n  }\n\n  getPlayer() {\n    return this.player\n  }\n}","const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\nconst diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\nconst rowDictionary = require('../dictionaries/row.json');\nconst columnDictionary = require('../dictionaries/column.json');\n\nexport const isSameRow = (src, dest) => { // TODO: Make more efficient using math\n  return !!(rowDictionary[src] && rowDictionary[src][dest]);\n}\n\nexport const isSameColumn = (src, dest) => {\n  return !!(columnDictionary[src] && columnDictionary[src][dest]);\n}\n\nexport const isSameDiagonal = (src, dest) => {\n  return !!((diagonalDictionaryTLBR[src] && diagonalDictionaryTLBR[src][dest]) ||\n    (diagonalDictionaryTRBL[src] && diagonalDictionaryTRBL[src][dest]))\n}\n\nexport const isPathClean = (srcToDestPath, squares) => {\n  var out = undefined;\n  if (squares instanceof Map) {\n    out = srcToDestPath.reduce((acc, curr) => { return !squares.get(curr) && acc; }, true);\n  }\n  else {\n    out = srcToDestPath.reduce((acc, curr) => { return !squares[curr] && acc; }, true);\n  }\n  return out;\n}\n\nexport const isValidIndex = (index) => {\n  return index >= 0 && index <= 63;\n}\n\nexport const compareMaps = (map1, map2) => {\n  var testVal;\n  if (map1.size !== map2.size) {\n    console.log(map1);\n    console.log(map2);\n    console.log(\"maps not equal\");\n\n    return false;\n  }\n  for (var [key, val] of map1) {\n    testVal = map2.get(key);\n    // in cases of an undefined value, make sure the key\n    // actually exists on the object so there are no false positives\n    if (testVal !== val || (testVal === undefined && !map2.has(key))) {\n      console.log(map1);\n      console.log(map2);\n      console.log(\"maps not equal\");\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const compareMapsAndSets = (map1, set1, set2) => {\n  if (map1.size !== (set1.size + set2.size)) {\n    console.log(\"Differing sizes\");\n    console.log(map1);\n    console.log(set1);\n    console.log(set2);\n    return false;\n  }\n  for (var [key, val] of map1) {\n    // in cases of an undefined value, make sure the key\n    // actually exists on the object so there are no false positives\n    if (!(set1.has(key) || set2.has(key))) {\n      console.log(\"Key not found\");\n      console.log(map1);\n      console.log(set1);\n      console.log(set2);\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const toChessLocation = (index) => {\n  var row = 8 - Math.floor(index / 8);\n  var col = index % 8;\n  return String.fromCharCode(65 + col) + row;\n}","import Piece from './piece.js';\nimport { isSameDiagonal, isSameRow, isValidIndex } from '../helpers/index.js'\n\nexport default class King extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg\"),\n      50);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      return isValidIndex(dest) && // destination is valid index\n        (!squares.get(dest) ||  // destination is null or\n          squares.get(dest).player !== this.player) && // destination is occupied by an enemy\n        ((src - 9 === dest && isSameDiagonal(src, dest)) ||\n          src - 8 === dest ||\n          (src - 7 === dest && isSameDiagonal(src, dest)) ||\n          (src + 1 === dest && isSameRow(src, dest)) ||\n          (src + 9 === dest && isSameDiagonal(src, dest)) ||\n          src + 8 === dest ||\n          (src + 7 === dest && isSameDiagonal(src, dest)) ||\n          (src - 1 === dest && isSameRow(src, dest)));\n    }\n    else {\n      return isValidIndex(dest) && // destination is valid index\n        (!squares[dest] ||  // destination is null or\n          squares[dest].player !== this.player) && // destination is occupied by an enemy\n        ((src - 9 === dest && isSameDiagonal(src, dest)) ||\n          src - 8 === dest ||\n          (src - 7 === dest && isSameDiagonal(src, dest)) ||\n          (src + 1 === dest && isSameRow(src, dest)) ||\n          (src + 9 === dest && isSameDiagonal(src, dest)) ||\n          src + 8 === dest ||\n          (src + 7 === dest && isSameDiagonal(src, dest)) ||\n          (src - 1 === dest && isSameRow(src, dest)));\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = [-9, -8, -7, 1, 9, 8, 7, -1];\n    possibleDifferences.forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * always returns empty array because of one step\n   * @return {[]}\n   */\n  getSrcToDestPath(src, dest) {\n    return [];\n  }\n}\n","import React from 'react';\n\nimport '../index.css';\nimport Square from './square.js';\n\nexport default class FallenSoldierBlock extends React.Component {\n\n  renderSquare(square, i, squareShade) {\n    return <Square\n      key={i}\n      keyVal={i}\n      piece={square}\n      style={square.style}\n    />\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row indiv-fallen-block\">{this.props.whiteFallenSoldiers.map((ws, index) =>\n          this.renderSquare(ws, index)\n        )}</div>\n        <div className=\"board-row indiv-fallen-block\">{this.props.blackFallenSoldiers.map((bs, index) =>\n          this.renderSquare(bs, index)\n        )}</div>\n      </div>\n    );\n  }\n}\n\n","import Piece from './piece.js';\nimport { isSameDiagonal, isPathClean } from '../helpers/index.js'\n\nexport default class Bishop extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg\"),\n      3);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && isPathClean(this.getSrcToDestPath(src, dest), squares) && isSameDiagonal(src, dest) && (!squares.get(dest) || isDestEnemyOccupied);\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && isPathClean(this.getSrcToDestPath(src, dest), squares) && isSameDiagonal(src, dest) && (!squares[dest] || isDestEnemyOccupied);\n    }\n\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\n    const diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\n    if (!!diagonalDictionaryTLBR[src]) {\n      Object.keys(diagonalDictionaryTLBR[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    if (!!diagonalDictionaryTRBL[src]) {\n      Object.keys(diagonalDictionaryTRBL[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 9 === 0) {\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else {\n      incrementBy = 7;\n      pathStart += 7;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Piece from './piece.js';\nimport { isSameRow, isValidIndex } from '../helpers/index.js'\n\nexport default class Knight extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg\"),\n      3);\n  }\n  /**\n   * returns true if a move is possible\n   * @param {number} src - starting position\n   * @param {number} dest - ending position\n   * @param {Piece[]} squares - array representing locations of chess pieces\n   * @returns {boolean} if a move is possible\n   */\n  isMovePossible(src, dest, squares) {\n    const possibleDifferences = [-17, -10, 6, 15, -15, -6, 10, 17];\n    if (squares instanceof Map) {\n      return possibleDifferences.reduce((total, currentDiff) => {\n        return total ||\n          (src + currentDiff === dest &&\n            !isSameRow(src, dest) &&\n            this.isBetweenLeftRightBoundary(src, dest) &&\n            (!squares.get(dest) /* not null*/ || squares.get(src).player !== squares.get(dest).player));\n      }, false);\n    }\n    else {\n      return possibleDifferences.reduce((total, currentDiff) => {\n        return total ||\n          (src + currentDiff === dest &&\n            !isSameRow(src, dest) &&\n            this.isBetweenLeftRightBoundary(src, dest) &&\n            (!squares[dest] /* not null*/ || squares[src].player !== squares[dest].player));\n      }, false);\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = [-17, -10, 6, 15, -15, -6, 10, 17];\n    possibleDifferences.forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * returns true if knight doesn't pass through the left or right boundary (i.e. knight doesnt jump from the left side to the right side)\n   * @param {number} src - Initial position\n   * @param {number} dest - Ending position\n   */\n  isBetweenLeftRightBoundary(src, dest) {\n    const rowColDiffTable = require('../dictionaries/knightMapping.json');\n    var destRow = Math.floor(dest / 8); // Integer division\n    var destCol = dest % 8;\n    var srcRow = Math.floor(src / 8);\n    var srcCol = src % 8;\n\n    return (rowColDiffTable[dest - src] && rowColDiffTable[dest - src]['row'] === (destRow - srcRow) && rowColDiffTable[dest - src]['col'] === (destCol - srcCol));\n  }\n\n  /**\n   * always returns empty array because of jumping\n   * @return {[]}\n   */\n  getSrcToDestPath() {\n    return [];\n  }\n}\n","import Piece from './piece.js';\nimport { isSameDiagonal, isValidIndex, isPathClean } from '../helpers/index.js'\n\nexport default class Pawn extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg\"),\n      1);\n    this.initialPositions = {\n      1: [48, 49, 50, 51, 52, 53, 54, 55],\n      2: [8, 9, 10, 11, 12, 13, 14, 15]\n    }\n  }\n\n  isMovePossible(src, dest, squares) {\n    var isDestEnemyOccupied = undefined;\n    var isDestinationOK = undefined;\n    if (squares instanceof Map) {\n      isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      isDestinationOK = isPathClean(this.getSrcToDestPath(src, dest), squares) && (!squares.get(dest) || isDestEnemyOccupied);\n    }\n    else {\n      isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      isDestinationOK = isPathClean(this.getSrcToDestPath(src, dest), squares) && (!squares[dest] || isDestEnemyOccupied);\n    }\n\n    if (this.player === 1) {\n      if ((dest === src - 8 && !isDestEnemyOccupied) || (dest === src - 16 && !isDestEnemyOccupied && this.initialPositions[1].indexOf(src) !== -1)) {\n        return isDestinationOK;\n      }\n      else if (isDestEnemyOccupied && isSameDiagonal(src, dest) && (dest === src - 9 || dest === src - 7)) {\n        return isDestinationOK;\n      }\n    }\n    else if (this.player === 2) {\n      if ((dest === src + 8 && !isDestEnemyOccupied) || (dest === src + 16 && !isDestEnemyOccupied && this.initialPositions[2].indexOf(src) !== -1)) {\n        return isDestinationOK;\n      }\n      else if (isDestEnemyOccupied && isSameDiagonal(src, dest) && (dest === src + 9 || dest === src + 7)) {\n        return isDestinationOK;\n      }\n    }\n    return false;\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    const possibleDifferences = {\n      1: [-8, -16, -9, -7],\n      2: [8, 16, 9, 7]\n    }\n    possibleDifferences[this.player].forEach((currentDiff) => {\n      if (isValidIndex(src + currentDiff) && this.isMovePossible(src, src + currentDiff, squares)) {\n        possibleMoves.push(src + currentDiff);\n      }\n    });\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * returns array of one if pawn moves two steps, else returns empty array  \n   * @param  {number} src - initial position\n   * @param  {number} dest - ending position\n   * @return {number[]} array of indicies representing the path the pawn takes\n   */\n  getSrcToDestPath(src, dest) {\n    if (dest === src - 16) {\n      return [src - 8];\n    }\n    else if (dest === src + 16) {\n      return [src + 8];\n    }\n    return [];\n  }\n}\n","import Piece from './piece.js';\nimport { isSameRow, isSameColumn, isSameDiagonal, isPathClean, isValidIndex } from '../helpers/index.js'\n\nexport default class Queen extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg\"),\n      9);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && (!squares.get(dest) || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameDiagonal(src, dest) || isSameRow(src, dest) || isSameColumn(src, dest));\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && (!squares[dest] || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameDiagonal(src, dest) || isSameRow(src, dest) || isSameColumn(src, dest));\n    }\n\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    var dest = 1000;\n    // column\n    for (dest = src % 8; isValidIndex(dest); dest += 8) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // row\n    for (dest = Math.floor(src / 8) * 8; dest < (Math.floor(src / 8) * 8 + 8); dest++) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // diagonal\n    const diagonalDictionaryTLBR = require('../dictionaries/diagonalTopLeftBottomRight.json');\n    const diagonalDictionaryTRBL = require('../dictionaries/diagonalTopRightBottomLeft.json');\n    if (!!diagonalDictionaryTLBR[src]) {\n      Object.keys(diagonalDictionaryTLBR[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    if (!!diagonalDictionaryTRBL[src]) {\n      Object.keys(diagonalDictionaryTRBL[src]).forEach((current) => {\n        current = Number(current);\n        if (this.isMovePossible(src, current, squares)) {\n          possibleMoves.push(current);\n        }\n      });\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 8 === 0 && isSameColumn(src, dest)) {\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else if (Math.abs(src - dest) % 9 === 0 && isSameDiagonal(src, dest)) {\n      incrementBy = 9;\n      pathStart += 9;\n    }\n    else if (Math.abs(src - dest) % 7 === 0 && isSameDiagonal(src, dest)) {\n      incrementBy = 7;\n      pathStart += 7;\n    }\n    else {\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}","import Piece from './piece.js';\nimport { isSameRow, isSameColumn, isPathClean, isValidIndex } from '../helpers/index.js'\n\nexport default class Rook extends Piece {\n  constructor(player) {\n    super(player,\n      (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg\"),\n      5);\n  }\n\n  isMovePossible(src, dest, squares) {\n    if (squares instanceof Map) {\n      const isDestEnemyOccupied = Boolean(squares.get(dest)) && squares.get(dest).player !== this.player;\n      return src !== dest && (!squares.get(dest) || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameColumn(src, dest) || isSameRow(src, dest));\n    }\n    else {\n      const isDestEnemyOccupied = Boolean(squares[dest]) && squares[dest].player !== this.player;\n      return src !== dest && (!squares[dest] || isDestEnemyOccupied) && isPathClean(this.getSrcToDestPath(src, dest), squares) && (isSameColumn(src, dest) || isSameRow(src, dest));\n    }\n  }\n\n  getPossibleMoves(src, squares) {\n    const possibleMoves = [];\n    // column\n    // TODO: Optimize by using while loop starting from src and going outwards until reaching a piece\n    var dest = 1000;\n    for (dest = src % 8; isValidIndex(dest); dest += 8) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n\n    // row\n    for (dest = Math.floor(src / 8) * 8; dest < (Math.floor(src / 8) * 8 + 8); dest++) {\n      if (this.isMovePossible(src, dest, squares)) {\n        possibleMoves.push(dest);\n      }\n    }\n    return possibleMoves;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n  getSrcToDestPath(src, dest) {\n    let path = [], pathStart, pathEnd, incrementBy;\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    }\n    else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n    if (Math.abs(src - dest) % 8 === 0 && isSameColumn(src, dest)) {\n      incrementBy = 8;\n      pathStart += 8;\n    }\n    else {\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n    return path;\n  }\n}\n","import Bishop from '../pieces/bishop.js';\nimport King from '../pieces/king.js';\nimport Knight from '../pieces/knight.js';\nimport Pawn from '../pieces/pawn.js';\nimport Queen from '../pieces/queen.js';\nimport Rook from '../pieces/rook.js';\n\nexport const initialiseChessBoard = () => {\n  const squares = Array(64).fill(null);\n\n  for (let i = 8; i < 16; i++) {\n    squares[i] = new Pawn(2);\n    squares[i + 40] = new Pawn(1);\n  }\n  squares[0] = new Rook(2);\n  squares[7] = new Rook(2);\n  squares[56] = new Rook(1);\n  squares[63] = new Rook(1);\n\n  squares[1] = new Knight(2);\n  squares[6] = new Knight(2);\n  squares[57] = new Knight(1);\n  squares[62] = new Knight(1);\n\n  squares[2] = new Bishop(2);\n  squares[5] = new Bishop(2);\n  squares[58] = new Bishop(1);\n  squares[61] = new Bishop(1);\n\n  squares[3] = new Queen(2); // TODO: king, queen positions are swapped\n  squares[4] = new King(2);\n\n  squares[59] = new Queen(1);\n  squares[60] = new King(1);\n\n  return squares;\n}\nexport const getInitialSoldierIndices = (player) => {\n  const output = new Set();\n  var index = 1000;\n  if(player === 2){\n    for(index = 0; index < 16; index++){\n      output.add(index);\n    }\n  }\n  else if(player === 1){\n    for(index = 48; index < 64; index++){\n      output.add(index);\n    }\n  }\n  return output;\n}","export default function InvalidDepthException() {\n    this.message = \"Invalid Depth was Provided! Depth must be >= 1\";\n    // Use V8's native method if available, otherwise fallback\n    if (\"captureStackTrace\" in Error)\n        Error.captureStackTrace(this, InvalidDepthException);\n    else\n        this.stack = (new Error()).stack;\n}\n\nInvalidDepthException.prototype = Object.create(Error.prototype);\nInvalidDepthException.prototype.name = \"InvalidDepthException\";\nInvalidDepthException.prototype.constructor = InvalidDepthException;","import Piece from \"../pieces/piece\";\nimport InvalidDepthException from \"./invalidDepthException\";\nimport { toChessLocation } from \"./index\"\nvar computationsPerformed = 0;\n/**\n * Calculates the best move and plays it\n * @param {Piece[]} squares - Array representing the Pieces on the board\n * @param {Set<Number>} whiteAliveSoldiers - Set of the indices of all alive white soldiers\n * @param {Set<Number>} blackAliveSoldiers - Set of the indices of all alive black soldiers\n * @param {Piece[]} whiteFallenSoldiers - Set of the indices of all fallen white soldiers\n * @param {Piece[]} blackFallenSoldiers - Set of the indices of all fallen black soldiers\n * @param {Number} depth - Depth of recursive call to calculate best moves from\n * @param {Number} player - Which player to move (1 or 2)\n * @param {Object} self - A pointer to the object that called this function (i.e. this)\n * @throws Exception if depth < 1\n */\nexport default function minimaxRunner(squares, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth, player, self) {\n    if (depth < 1) {\n        throw new InvalidDepthException();\n    }\n    // convert squares to a map for better access\n    var map = squares.reduce((mapObj, obj, index) => {\n        if (obj != null) {\n            mapObj.set(index, obj);\n        }\n        return mapObj;\n    }, new Map());\n\n    const isMaximizingPlayer = player === 1 ? true : false;\n    var bestMove = isMaximizingPlayer ? -9999 : 9999;\n    var bestDest = 1000;\n    var bestSrc = 1000;\n    var alpha = -10000;\n    var beta = 10000;\n    var initialAliveSoldiers = undefined;\n    var src = undefined;\n    var dest = undefined;\n    var lostPiece = undefined;\n    var lostPieceObj = undefined;\n    var score = undefined;\n    if (isMaximizingPlayer) {\n        initialAliveSoldiers = new Set(whiteAliveSoldiers);\n        outerMaximizingLoop:\n        for (src of initialAliveSoldiers) {\n            for (dest of map.get(src).getPossibleMoves(src, map)) {\n                computationsPerformed++;\n                lostPiece = undefined;\n                lostPieceObj = undefined;\n\n                // If destination results in opposite side losing a piece\n                if (blackAliveSoldiers.has(dest)) {\n                    blackAliveSoldiers.delete(dest);\n                    blackFallenSoldiers.push(map.get(dest));\n                    lostPieceObj = map.get(dest);\n                    map.delete(dest);\n                    lostPiece = dest;\n                }\n                whiteAliveSoldiers.delete(src);\n                whiteAliveSoldiers.add(dest);\n                map.set(dest, map.get(src));\n                map.delete(src);\n                score = minimax(map, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth - 1, 2, alpha, beta, squares);\n                // Undo the previous move (better to undo than make copies of arrays, undo is better big-O)\n                map.set(src, map.get(dest));\n                map.delete(dest);\n                whiteAliveSoldiers.delete(dest);\n                whiteAliveSoldiers.add(src);\n                if (lostPiece !== undefined) {\n                    blackAliveSoldiers.add(lostPiece);\n                    blackFallenSoldiers.pop();\n                    map.set(dest, lostPieceObj);\n                }\n                if (score > bestMove) {\n                    bestMove = score;\n                    bestDest = dest;\n                    bestSrc = src;\n                }\n\n\n                alpha = Math.max(alpha, bestMove);\n                if (alpha >= beta) {\n                    break outerMaximizingLoop;\n                }\n            }\n        }\n    }\n    else { // black's turn\n        initialAliveSoldiers = new Set(blackAliveSoldiers);\n        outerMinimizingLoop:\n        for (src of initialAliveSoldiers) {\n            for (dest of map.get(src).getPossibleMoves(src, map)) {\n                computationsPerformed++;\n                lostPiece = undefined;\n                lostPieceObj = undefined;\n                // If destination results in opposite side losing a piece\n                if (whiteAliveSoldiers.has(dest)) {\n                    whiteAliveSoldiers.delete(dest);\n                    whiteFallenSoldiers.push(map.get(dest));\n                    lostPieceObj = map.get(dest);\n                    map.delete(dest);\n                    lostPiece = dest;\n                }\n                blackAliveSoldiers.delete(src);\n                blackAliveSoldiers.add(dest);\n                map.set(dest, map.get(src));\n                map.delete(src);\n                score = minimax(map, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth - 1, 1, alpha, beta, squares);\n                // Undo the previous move (better to undo than make copies of arrays, undo is better big-O)\n                map.set(src, map.get(dest));\n                map.delete(dest);\n                blackAliveSoldiers.delete(dest);\n                blackAliveSoldiers.add(src);\n                if (lostPiece !== undefined) {\n                    whiteAliveSoldiers.add(lostPiece);\n                    whiteFallenSoldiers.pop();\n                    map.set(dest, lostPieceObj);\n                }\n                if (score < bestMove) {\n                    bestMove = score;\n                    bestDest = dest;\n                    bestSrc = src;\n                }\n\n                beta = Math.min(beta, bestMove);\n                if (beta <= alpha) {\n                    break outerMinimizingLoop;\n                }\n            }\n        }\n    }\n    console.log(\"Score: \" + bestMove);\n    console.log(\"Best Source: \" + bestSrc);\n    console.log(\"Best Destination: \" + bestDest);\n    console.log(\"Repetitions: \" + computationsPerformed);\n\n    self.setState(oldState => ({\n        score: bestMove,\n        bestSrc: toChessLocation(bestSrc),\n        bestDest: toChessLocation(bestDest),\n        computations: computationsPerformed\n    }));\n    self.handleClick(bestSrc);\n    self.handleClick(bestDest);\n    computationsPerformed = 0;\n}\n\n/**\n * Internal Function that does Minimax AB\n * @param {Map<Number, Piece>} map - Map representing locations of pieces on the board\n * @param {Set<Number>} whiteAliveSoldiers - Set of the indices of all alive white soldiers\n * @param {Set<Number>} blackAliveSoldiers - Set of the indices of all alive black soldiers\n * @param {Piece[]} whiteFallenSoldiers - Set of the indices of all fallen white soldiers\n * @param {Piece[]} blackFallenSoldiers - Set of the indices of all fallen black soldiers\n * @param {Number} depth - Depth of recursive call to calculate best moves from\n * @param {Number} player - Which player to move (1 or 2)\n * @param {Number} alpha - Alpha value\n * @param {Number} beta - Beta value\n * @param {Piece[]} squares - Array representing the Pieces on the board\n */\nfunction minimax(map, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth, player, alpha, beta, squares) {\n    if (depth < 1) {\n        return evaluateScore(map, whiteAliveSoldiers, blackAliveSoldiers);\n    }\n\n    const isMaximizingPlayer = player === 1 ? true : false;\n    var bestMove = isMaximizingPlayer ? -9999 : 9999;\n    var initialAliveSoldiers = undefined;\n    var src = undefined;\n    var dest = undefined;\n    var lostPiece = undefined;\n    var lostPieceObj = undefined;\n    var score = undefined;\n    if (isMaximizingPlayer) {\n        initialAliveSoldiers = new Set(whiteAliveSoldiers);\n        outerMaximizingLoop:\n        for (src of initialAliveSoldiers) {\n            for (dest of map.get(src).getPossibleMoves(src, map)) {\n                computationsPerformed++;\n                lostPiece = undefined;\n                lostPieceObj = undefined;\n                // If destination results in opposite side losing a piece\n                if (blackAliveSoldiers.has(dest)) {\n                    blackAliveSoldiers.delete(dest);\n                    blackFallenSoldiers.push(map.get(dest));\n                    lostPieceObj = map.get(dest);\n                    map.delete(dest);\n                    lostPiece = dest;\n                }\n                whiteAliveSoldiers.delete(src);\n                whiteAliveSoldiers.add(dest);\n                map.set(dest, map.get(src));\n                map.delete(src);\n                score = minimax(map, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth - 1, 2, alpha, beta, squares);\n                // Undo the previous move (better to undo than make copies of arrays, undo is better big-O)\n                map.set(src, map.get(dest));\n                map.delete(dest);\n                whiteAliveSoldiers.delete(dest);\n                whiteAliveSoldiers.add(src);\n                if (lostPiece !== undefined) {\n                    blackAliveSoldiers.add(lostPiece);\n                    blackFallenSoldiers.pop();\n                    map.set(dest, lostPieceObj);\n                }\n                if (score > bestMove) {\n                    bestMove = score;\n                }\n                alpha = Math.max(alpha, bestMove);\n                if (alpha >= beta) {\n                    break outerMaximizingLoop;\n                }\n            }\n        }\n    }\n    else { // black's turn\n        initialAliveSoldiers = new Set(blackAliveSoldiers);\n        outerMinimizingLoop:\n        for (src of initialAliveSoldiers) {\n            for (dest of map.get(src).getPossibleMoves(src, map)) {\n                computationsPerformed++;\n                lostPiece = undefined;\n                lostPieceObj = undefined;\n                // If destination results in opposite side losing a piece\n                if (whiteAliveSoldiers.has(dest)) {\n                    whiteAliveSoldiers.delete(dest);\n                    whiteFallenSoldiers.push(map.get(dest));\n                    lostPieceObj = map.get(dest);\n                    map.delete(dest);\n                    lostPiece = dest;\n                }\n                blackAliveSoldiers.delete(src);\n                blackAliveSoldiers.add(dest);\n                map.set(dest, map.get(src));\n                map.delete(src);\n                score = minimax(map, whiteAliveSoldiers, blackAliveSoldiers, whiteFallenSoldiers, blackFallenSoldiers, depth - 1, 1, alpha, beta, squares);\n                // Undo the previous move (better to undo than make copies of arrays, undo is better big-O)\n                map.set(src, map.get(dest));\n                map.delete(dest);\n                blackAliveSoldiers.delete(dest);\n                blackAliveSoldiers.add(src);\n                if (lostPiece !== undefined) {\n                    whiteAliveSoldiers.add(lostPiece);\n                    whiteFallenSoldiers.pop();\n                    map.set(dest, lostPieceObj);\n                }\n                if (score < bestMove) {\n                    bestMove = score;\n                }\n\n                beta = Math.min(beta, bestMove);\n                if (beta <= alpha) {\n                    break outerMinimizingLoop;\n                }\n            }\n        }\n    }\n    return bestMove;\n}\n\n// White is positive, black is negative\nfunction evaluateScore(map, whiteAliveSoldiers, blackAliveSoldiers) {\n    var sum = 0;\n    //console.log(map);\n    whiteAliveSoldiers.forEach(element => {\n        sum += map.get(element).getValue();\n    });\n    blackAliveSoldiers.forEach(element => {\n        sum -= map.get(element).getValue();\n    });\n    return sum;\n}\n\nfunction swapInMap(map, a, b) {\n    //console.log(map instanceof Map);\n    var itemAtA = map.get(a);\n    var itemAtB = map.get(b);\n    map.delete(a);\n    map.delete(b);\n    if (itemAtA !== undefined) {\n        map.set(b, itemAtA);\n    }\n    if (itemAtB !== undefined) {\n        map.set(a, itemAtB);\n    }\n}\n\n","import React from 'react';\nimport { GrReactjs, GrHeroku, GrGithub } from 'react-icons/gr';\n\n\nimport '../index.css';\nimport Board from './board.js';\nimport King from '../pieces/king'\nimport FallenSoldierBlock from './fallen-soldier-block.js';\nimport { initialiseChessBoard, getInitialSoldierIndices } from '../helpers/board-initialiser.js';\nimport minimaxRunner from '../helpers/minimax';\n\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      whiteAliveSoldiers: getInitialSoldierIndices(1),\n      blackAliveSoldiers: getInitialSoldierIndices(2),\n      player: 1,\n      sourceSelection: -1,\n      status: '',\n      turn: 'white',\n      score: '0',\n      bestSrc: 'N/A',\n      bestDest: 'N/A',\n      computations: 'N/A',\n      depth: 4\n    }\n  }\n\n  /**\n   * Runs Chess Logic when Player clicks the board\n   * @param {Number} i - The location on the board that the user selected\n   */\n  handleClick(i) {\n    const squares = [...this.state.squares];\n    if (this.state.sourceSelection === -1) { // If no piece is already selected (i.e. first click)\n      if (!squares[i] || squares[i].player !== this.state.player) { // If player selected null piece or a piece that isn't under control of player\n        this.setState({ status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\" });\n        if (squares[i]) {\n          squares[i].style = { ...squares[i].style, backgroundColor: \"\" };\n        }\n      }\n      else {\n        // Player clicked a piece to move\n        squares[i].style = { ...squares[i].style, backgroundColor: \"#856312\" };\n        this.setState({\n          status: \"Choose destination for the selected piece\",\n          sourceSelection: i\n        })\n      }\n      return\n    }\n\n    // remove background color\n    squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style, backgroundColor: \"\" };\n\n    // Prevent moving piece on top of another piece of the same color\n    if (squares[i] && squares[i].player === this.state.player) {\n      this.setState({\n        status: \"Wrong selection. Choose valid source and destination again.\",\n        sourceSelection: -1,\n      });\n    }\n    else {\n\n      const whiteFallenSoldiers = [];\n      const blackFallenSoldiers = [];\n      const whiteAliveSoldiers = this.state.whiteAliveSoldiers;\n      const blackAliveSoldiers = this.state.blackAliveSoldiers;\n\n      const isMovePossible = squares[this.state.sourceSelection].isMovePossible(this.state.sourceSelection, i, squares);\n      if (isMovePossible) {\n        if (squares[i] !== null) { // If piece kills an opponent's piece\n          if (squares[i].player === 1) {\n            whiteFallenSoldiers.push(squares[i]);\n            // Remove dead piece from aliveSoldiers array\n            whiteAliveSoldiers.delete(i);\n          }\n          else {\n            blackFallenSoldiers.push(squares[i]);\n            // Remove dead piece from aliveSoldiers array\n            blackAliveSoldiers.delete(i);\n          }\n\n          // Game over if the piece that died is a King\n          if (squares[i] instanceof King) {\n            console.log(\"Game over\");\n            this.setState(oldState => ({\n              sourceSelection: -1,\n              squares,\n              whiteFallenSoldiers: [...oldState.whiteFallenSoldiers, ...whiteFallenSoldiers],\n              blackFallenSoldiers: [...oldState.blackFallenSoldiers, ...blackFallenSoldiers],\n              status: this.state.turn.charAt(0).toUpperCase() + this.state.turn.slice(1) + \" wins! Game Over!\" // Capitalize the player name\n            }));\n            return;\n          }\n        }\n\n        squares[i] = squares[this.state.sourceSelection];\n        squares[this.state.sourceSelection] = null;\n        // remove sourceSelection add I (i.e. update aliveSoldiers arrays)\n        if (this.state.player === 1) { // White\n          whiteAliveSoldiers.delete(this.state.sourceSelection);\n          whiteAliveSoldiers.add(i);\n        }\n        else if (this.state.player === 2) { // Black\n          blackAliveSoldiers.delete(this.state.sourceSelection);\n          blackAliveSoldiers.add(i);\n        }\n\n        {\n          // Update turn\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white';\n          this.setState(oldState => ({\n            sourceSelection: -1,\n            squares,\n            whiteFallenSoldiers: [...oldState.whiteFallenSoldiers, ...whiteFallenSoldiers],\n            blackFallenSoldiers: [...oldState.blackFallenSoldiers, ...blackFallenSoldiers],\n            whiteAliveSoldiers: whiteAliveSoldiers,\n            blackAliveSoldiers: blackAliveSoldiers,\n            player,\n            status: '',\n            turn\n          }));\n\n          // Call minimax for opponent\n          if (player === 1) {\n            setTimeout(minimaxRunner, 1000, squares,\n              this.state.whiteAliveSoldiers, this.state.blackAliveSoldiers,\n              this.state.whiteFallenSoldiers, this.state.blackFallenSoldiers,\n              this.state.depth, 1, this);\n          }\n          else {\n            setTimeout(minimaxRunner, 1000, squares,\n              this.state.whiteAliveSoldiers, this.state.blackAliveSoldiers,\n              this.state.whiteFallenSoldiers, this.state.blackFallenSoldiers,\n              this.state.depth, 2, this);\n          }\n        }\n      }\n      else {\n        this.setState({\n          status: \"Wrong selection. Choose valid source and destination again- impossible move.\",\n          sourceSelection: -1,\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the index of the king (i.e. the king's location)\n   * @param {Piece[]} squares - The array representing the current state of the board\n   * @param {Number} player - The player ID of the King requested\n   */\n  getKingPosition(squares, player) {\n    return squares.reduce((acc, curr, i) =>\n      acc || //King may be only one, if we had found it, returned his position\n      ((curr //current squre mustn't be a null\n        && (curr.getPlayer() === player)) //we are looking for aspecial king \n        && (curr instanceof King)\n        && i), // returned position if all conditions are completed\n      null)\n  }\n\n  /**\n   * Returns true if player is Check, and false if not check.\n   * @param {Piece[]} squares - The array representing the current state of the board\n   * @param {Number} player - The player ID requested to check\n   */\n  isCheckForPlayer(squares, player) {\n    const opponent = player === 1 ? 2 : 1\n    const playersKingPosition = this.getKingPosition(squares, player)\n    const canPieceKillPlayersKing = (piece, i) => piece.isMovePossible(playersKingPosition, i, squares)\n    return squares.reduce((acc, curr, idx) =>\n      acc ||\n      (curr &&\n        (curr.getPlayer() === opponent) && canPieceKillPlayersKing(curr, idx)\n        && true),\n      false)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={this.state.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className=\"game-bottom-box\">\n              <div className=\"float-child\">\n                <h3 className=\"turn-label\">Turn</h3>\n                <div id=\"player-turn-box\" style={{ backgroundColor: this.state.turn }}>\n                </div>\n              </div>\n\n              <div className=\"float-child console-text\">\n                <p>\n                  Best Starting Position: {this.state.bestSrc}\n                  <br></br>\n                  Best Ending Position: {this.state.bestDest}\n                  <br></br>\n                  Computations Performed: {this.state.computations}\n                  <br></br>\n                  Recursive Depth: {this.state.depth}\n                </p>\n              </div>\n            </div>\n            <div className=\"game-status\">{this.state.status}</div>\n\n            <div className=\"fallen-soldier-block\">\n\n              {<FallenSoldierBlock\n                whiteFallenSoldiers={this.state.whiteFallenSoldiers}\n                blackFallenSoldiers={this.state.blackFallenSoldiers}\n              />\n              }\n            </div>\n\n          </div>\n        </div>\n\n        <div className=\"icons-attribution\">\n          <div>\n            <div className=\"tech-used\">\n              <p>\n                Created by Jonathan Xu using <span className=\"react-icon\"><GrReactjs /> React</span> and deployed to <span className=\"heroku-icon\"><GrHeroku /> Heroku</span>.\n              </p>\n              <p>\n                <a href=\"https://github.com/ViciousCupcake/Chess-AI\" target=\"_blank\" rel=\"noreferrer\"> <GrGithub /> Source Code</a>\n              </p>\n            </div>\n            <div>\n              <small> Chess Icons And Favicon (extracted) By <a href=\"https://en.wikipedia.org/wiki/User:Cburnett\" >en:User:Cburnett</a> [\n              <a href=\"http://www.gnu.org/copyleft/fdl.html\" target=\"_blank\" rel=\"noreferrer\">GFDL</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" target=\"_blank\" rel=\"noreferrer\">CC-BY-SA-3.0</a>,\n              <a href=\"http://opensource.org/licenses/bsd-license.php\" target=\"_blank\" rel=\"noreferrer\">BSD</a> or <a href=\"http://www.gnu.org/licenses/gpl.html\" target=\"_blank\" rel=\"noreferrer\">GPL</a>],\n              <span> </span><a href=\"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\" target=\"_blank\" rel=\"noreferrer\">via Wikimedia Commons</a>.</small>\n            </div>\n            <div>\n              <small> Chess Board Created by <a href=\"https://www.techighness.com\" target=\"_blank\" rel=\"noreferrer\">Talha Awan</a> [<a href=\"https://mit-license.org\" target=\"_blank\" rel=\"noreferrer\">MIT License</a>]</small>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Game from './components/game.js'\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}